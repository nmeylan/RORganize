(function (e) {
    function r(r, i) {
        var s = this, o = r.add(s), u = e(window), a, f, l, c = e.tools.expose && (i.mask || i.expose), h = Math.random().toString().slice(10);
        if (c) {
            if (typeof c == "string") {
                c = {color: c}
            }
            c.closeOnClick = c.closeOnEsc = false
        }
        var p = i.target || r.attr("rel");
        f = p ? e(p) : null || r;
        if (!f.length) {
            throw"Could not find Overlay: " + p
        }
        if (r && r.index(f) == -1) {
            r.click(function (e) {
                s.load(e);
                return e.preventDefault()
            })
        }
        e.extend(s, {load: function (r) {
            if (s.isOpened()) {
                return s
            }
            var a = n[i.effect];
            if (!a) {
                throw'Overlay: cannot find effect : "' + i.effect + '"'
            }
            if (i.oneInstance) {
                e.each(t, function () {
                    this.close(r)
                })
            }
            r = r || e.Event();
            r.type = "onBeforeLoad";
            o.trigger(r);
            if (r.isDefaultPrevented()) {
                return s
            }
            l = true;
            if (c) {
                e(f).expose(c)
            }
            var p = i.top, d = i.left, v = f.outerWidth({margin: true}), m = f.outerHeight({margin: true});
            if (typeof p == "string") {
                p = p == "center" ? Math.max((u.height() - m) / 2, 0) : parseInt(p, 10) / 100 * u.height()
            }
            if (d == "center") {
                d = Math.max((u.width() - v) / 2, 0)
            }
            a[0].call(s, {top: p, left: d}, function () {
                if (l) {
                    r.type = "onLoad";
                    o.trigger(r)
                }
            });
            if (c && i.closeOnClick) {
                e.mask.getMask().one("click", s.close)
            }
            if (i.closeOnClick) {
                e(document).on("click." + h, function (t) {
                    if (!e(t.target).parents(f).length) {
                        s.close(t)
                    }
                })
            }
            if (i.closeOnEsc) {
                e(document).on("keydown." + h, function (e) {
                    if (e.keyCode == 27) {
                        s.close(e)
                    }
                })
            }
            return s
        }, close: function (t) {
            if (!s.isOpened()) {
                return s
            }
            t = t || e.Event();
            t.type = "onBeforeClose";
            o.trigger(t);
            if (t.isDefaultPrevented()) {
                return
            }
            l = false;
            n[i.effect][1].call(s, function () {
                t.type = "onClose";
                o.trigger(t)
            });
            e(document).off("click." + h + " keydown." + h);
            if (c) {
                e.mask.close()
            }
            return s
        }, getOverlay: function () {
            return f
        }, getTrigger: function () {
            return r
        }, getClosers: function () {
            return a
        }, isOpened: function () {
            return l
        }, getConf: function () {
            return i
        }});
        e.each("onBeforeLoad,onStart,onLoad,onBeforeClose,onClose".split(","), function (t, n) {
            if (e.isFunction(i[n])) {
                e(s).on(n, i[n])
            }
            s[n] = function (t) {
                if (t) {
                    e(s).on(n, t)
                }
                return s
            }
        });
        a = f.find(i.close || ".close");
        if (!a.length && !i.close) {
            a = e('<a class="close"></a>');
            f.prepend(a)
        }
        a.click(function (e) {
            s.close(e)
        });
        if (i.load) {
            s.load()
        }
    }

    e.tools = e.tools || {version: "@VERSION"};
    e.tools.overlay = {addEffect: function (e, t, r) {
        n[e] = [t, r]
    }, conf: {close: null, closeOnClick: true, closeOnEsc: true, closeSpeed: "fast", effect: "default", fixed: !e.browser.msie || e.browser.version > 6, left: "center", load: false, mask: null, oneInstance: true, speed: "normal", target: null, top: "10%"}};
    var t = [], n = {};
    e.tools.overlay.addEffect("default", function (t, n) {
        var r = this.getConf(), i = e(window);
        if (!r.fixed) {
            t.top += i.scrollTop();
            t.left += i.scrollLeft()
        }
        t.position = r.fixed ? "fixed" : "absolute";
        this.getOverlay().css(t).fadeIn(r.speed, n)
    }, function (e) {
        this.getOverlay().fadeOut(this.getConf().closeSpeed, e)
    });
    e.fn.overlay = function (n) {
        var i = this.data("overlay");
        if (i) {
            return i
        }
        if (e.isFunction(n)) {
            n = {onBeforeLoad: n}
        }
        n = e.extend(true, {}, e.tools.overlay.conf, n);
        this.each(function () {
            i = new r(e(this), n);
            t.push(i);
            e(this).data("overlay", i)
        });
        return n.api ? i : this
    }
})(jQuery);
(function (e) {
    function n() {
        if (e.browser.msie) {
            var t = e(document).height(), n = e(window).height();
            return[window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, t - n < 20 ? n : t]
        }
        return[e(document).width(), e(document).height()]
    }

    function r(t) {
        if (t) {
            return t.call(e.mask)
        }
    }

    e.tools = e.tools || {version: "@VERSION"};
    var t;
    t = e.tools.expose = {conf: {maskId: "exposeMask", loadSpeed: "slow", closeSpeed: "fast", closeOnClick: true, closeOnEsc: true, zIndex: 8, opacity: .8, startOpacity: 0, color: "#fff", onLoad: null, onClose: null}};
    var i, s, o, u, a;
    e.mask = {load: function (f, l) {
        if (o) {
            return this
        }
        if (typeof f == "string") {
            f = {color: f}
        }
        f = f || u;
        u = f = e.extend(e.extend({}, t.conf), f);
        i = e("#" + f.maskId);
        if (!i.length) {
            i = e("<div/>").attr("id", f.maskId);
            e("body").append(i)
        }
        var c = n();
        i.css({position: "absolute", top: 0, left: 0, width: c[0], height: c[1], display: "none", opacity: f.startOpacity, zIndex: f.zIndex});
        if (f.color) {
            i.css("backgroundColor", f.color)
        }
        if (r(f.onBeforeLoad) === false) {
            return this
        }
        if (f.closeOnEsc) {
            e(document).on("keydown.mask", function (t) {
                if (t.keyCode == 27) {
                    e.mask.close(t)
                }
            })
        }
        if (f.closeOnClick) {
            i.on("click.mask", function (t) {
                e.mask.close(t)
            })
        }
        e(window).on("resize.mask", function () {
            e.mask.fit()
        });
        if (l && l.length) {
            a = l.eq(0).css("zIndex");
            e.each(l, function () {
                var t = e(this);
                if (!/relative|absolute|fixed/i.test(t.css("position"))) {
                    t.css("position", "relative")
                }
            });
            s = l.css({zIndex: Math.max(f.zIndex + 1, a == "auto" ? 0 : a)})
        }
        i.css({display: "block"}).fadeTo(f.loadSpeed, f.opacity, function () {
            e.mask.fit();
            r(f.onLoad);
            o = "full"
        });
        o = true;
        return this
    }, close: function () {
        if (o) {
            if (r(u.onBeforeClose) === false) {
                return this
            }
            i.fadeOut(u.closeSpeed, function () {
                r(u.onClose);
                if (s) {
                    s.css({zIndex: a})
                }
                o = false
            });
            e(document).off("keydown.mask");
            i.off("click.mask");
            e(window).off("resize.mask")
        }
        return this
    }, fit: function () {
        if (o) {
            var e = n();
            i.css({width: e[0], height: e[1]})
        }
    }, getMask: function () {
        return i
    }, isLoaded: function (e) {
        return e ? o == "full" : o
    }, getConf: function () {
        return u
    }, getExposed: function () {
        return s
    }};
    e.fn.mask = function (t) {
        e.mask.load(t);
        return this
    };
    e.fn.expose = function (t) {
        e.mask.load(t, this);
        return this
    }
})(jQuery)